generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASEURL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  password      String?  // hashed password, nullable for OAuth
  image         String?
  role          UserRole @default(USER)
  phone         String?
  properties    Property[]
  favorites     Favorite[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

enum UserRole {
    USER
    ADMIN
}


model Property {
  id          String   @id @default(cuid())
  title       String
  description String   @default("")
  price       Decimal  @db.Decimal(12, 2)
  location    String
  city        String
  state       String
  coordinates Json?    // For geospatial data {lat: number, lng: number}
  bedrooms    Int
  bathrooms   Int
  sqft        Int
  image       String
  images      String   @default("") // Comma-separated string for compatibility
  featured    Boolean  @default(false)
  approved    Boolean  @default(false)
  type        PropertyType
  purpose     PropertyPurpose @default(SALE)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  favorites   Favorite[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([city])
  @@index([type])
  @@index([purpose])
  @@index([featured])
  @@index([approved])
  @@map("properties")
}

enum PropertyType {
  house
  apartment
  condo
  townhouse
  plot
  commercial
  office
}

enum PropertyPurpose {
  SALE
  RENT
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  excerpt     String
  content     String
  author      String
  published   Boolean  @default(false)
  publishDate DateTime
  category    String
  image       String
  readTime    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([published])
  @@index([category])
  @@map("blog_posts")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  content   String
  rating    Int      @db.SmallInt
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model Contact {
  id        String        @id @default(cuid())
  fullName  String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status])
  @@map("contacts")
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletters")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, propertyId])
  @@map("favorites")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([otp])
  @@map("password_resets")
}
